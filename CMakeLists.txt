cmake_minimum_required(VERSION 3.1)

file(READ "libclingcon/clingcon.h" main)
string(REGEX MATCH "#define CLINGCON_VERSION \"([^\"]*)\"" clingov ${main})

project(CLINGCON VERSION "${CMAKE_MATCH_1}" LANGUAGES C CXX)
if (POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW)
endif()
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "No build type selected - using 'Release'")
    set(CMAKE_BUILD_TYPE "Release")
endif()

# Enable folders in IDEs like Visual Studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

include(GNUInstallDirs)
include(CMakeDependentOption)

option(CLINGCON_BUILD_STATIC "do not build shared libraries" OFF)
option(CLINGCON_MANAGE_RPATH "set rpath if not installed into system directory" ON)
option(CLINGCON_BUILD_TESTS "build tests" OFF)

CMAKE_DEPENDENT_OPTION(CLINGCON_BUILD_SHARED "build clingcon library shared" ON "NOT CLINGCON_BUILD_STATIC" OFF)

mark_as_advanced(CLINGCON_BUILD_STATIC)
mark_as_advanced(CLINGCON_BUILD_SHARED)

if (MSVC)
    set(VC_RELEASE_LINK_OPTIONS /LTCG)
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    ${VC_RELEASE_LINK_OPTIONS}")
    SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}")
    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}")
    SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} ${VC_RELEASE_LINK_OPTIONS}")
    if (CLINGCON_BUILD_STATIC)
        # force static runtime
        string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    endif()
    add_compile_options("/wd4244" "/wd4267" "/wd26451")
    add_definitions("-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS")
endif()

if (POLICY CMP0063 AND CLINGCON_BUILD_SHARED)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
    set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

enable_testing()

if (CLINGCON_MANAGE_RPATH)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_FULL_LIBDIR}" isSystemDir)
    if ("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}")
    endif()
endif()

if (NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()
if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_IMPORT_LIBRARY_PREFIX)
    set(CMAKE_IMPORT_LIBRARY_PREFIX import_)
endif()

if(NOT PYCLINGCON_FORCE_OLD_MODULE AND (CMAKE_VERSION VERSION_GREATER "3.15.0" OR CMAKE_VERSION VERSION_EQUAL "3.15.0"))
    if(DEFINED PYTHON_EXECUTABLE AND NOT DEFINED Python_EXECUTABLE)
        set(Python_EXECUTABLE "${PYTHON_EXECUTABLE}")
    endif()
    if(DEFINED PYTHON_INCLUDE_DIR AND NOT DEFINED Python_INCLUDE_DIR)
        set(Python_INCLUDE_DIR "${PYTHON_INCLUDE_DIR}")
    endif()
    if(DEFINED PYTHON_LIBRARY AND NOT DEFINED Python_LIBRARY)
        set(Python_LIBRARY "${PYTHON_LIBRARY}")
    endif()
    if (POLICY CMP0094)
        cmake_policy(SET CMP0094 NEW)
    endif()
    set(_args Interpreter)
    set(_args ${_args} Development)
    if (CLINGCON_REQUIRE_PYTHON)
        set(_args ${_args} REQUIRED)
    endif()
    find_package(Python COMPONENTS ${_args})
else()
    find_package(PythonInterp)
    set(_args)
    if (CLINGCON_REQUIRE_PYTHON)
        set(_args ${_args} REQUIRED)
    endif()
    find_package(PythonLibs ${_args})
    if(PYTHONLIBS_FOUND)
        add_library(Python::Python INTERFACE IMPORTED)
        add_library(Python::Module INTERFACE IMPORTED)
        set(Python_Development_FOUND ON)
        set(Python_INCLUDE_DIRS "${PYTHON_INCLUDE_DIRS}")
        set(Python_VERSION "${PYTHONLIBS_VERSION_STRING}")
        set_property(TARGET Python::Python PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}")
        set_property(TARGET Python::Module PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}")
        set_property(TARGET Python::Python PROPERTY INTERFACE_LINK_LIBRARIES "${PYTHON_LIBRARIES}")
        if (MSVC) 
            set_property(TARGET Python::Module PROPERTY INTERFACE_LINK_LIBRARIES "${PYTHON_LIBRARIES}")
        endif()
    endif()
endif()

if (CLINGCON_PIP_PATH)
    add_library(libclingo INTERFACE)
    target_include_directories(libclingo INTERFACE CLINGCON_PIP_PATH)
    if (WIN32)
        message(STATUS "TODO: no support for windows yet!!!")
    elseif (APPLE)
        target_link_options(libclingo INTERFACE "-undefined dynamic_lookup")
    endif()
    add_subdirectory(libclingcon)
    add_subdirectory(libpyclingcon)
else()
    find_package(Clingo REQUIRED)
    add_subdirectory(libclingcon)
    add_subdirectory(libpyclingcon)
    add_subdirectory(app)
endif()
